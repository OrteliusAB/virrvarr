"use strict";

require("core-js/modules/es.array.concat");

require("core-js/modules/web.dom-collections.for-each");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Env = _interopRequireDefault(require("../Config/Env.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* This function writes user defined CSS classes to the DOM dynamically on start */
var initializeGraphStyles = function initializeGraphStyles(style, id) {
  var cssString = "";
  cssString = "\n                /* Text */\n                .virrvarr .multiplicity {\n                    font-size: ".concat(_Env.default.DEFAULT_MULTIPLICITY_FONT_SIZE, ";\n                }     \n\n                /* Tooltip */\n                #virrvarr-tooltip {\n                  position: absolute;\n                  display: none;\n                  min-width: ").concat(_Env.default.TOOLTIP_MIN_WIDTH, ";\n                  background: ").concat(_Env.default.TOOLTIP_BACKGROUND, ";\n                  opacity: 0.8;\n                  color: ").concat(_Env.default.TOOLTIP_COLOR, ";\n                  padding: 10px;\n                  text-align: center;\n                  max-width: ").concat(_Env.default.TOOLTIP_MAX_WIDTH, ";\n                  word-wrap: break-word;\n                  font-size: 14px;\n                  border-radius: ").concat(_Env.default.TOOLTIP_BORDER_RADIUS, ";\n                }\n\n                /* Search Highlighting */\n                .virrvarr .highlighted-node {\n                  stroke-width: ").concat(_Env.default.HIGHLIGHTING_BORDER_WIDTH, ";\n                  stroke: ").concat(_Env.default.HIGHLIGHTING_BORDER_COLOR, ";\n                  fill: ").concat(_Env.default.HIGHLIGHTING_COLOR, ";\n                  opacity: 0.3;\n                  pointer-events: none;\n                }\n\n                /* Default edge style */\n                .edge-path-default{\n                    fill: none;\n                    stroke-width: ").concat(_Env.default.DEFAULT_STROKE_WIDTH, " !important;\n                    stroke-dasharray: ").concat(_Env.default.DEFAULT_EDGE_DASHARRAY, " !important;\n                    stroke: ").concat(_Env.default.DEFAULT_EDGE_COLOR, " !important;\n                }\n                .edge-path-default.hovered{\n                    stroke: ").concat(_Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, " !important;\n                }\n                .edge-path-default.focused{\n                    stroke: ").concat(_Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                }\n                \n                .label-rect-default{\n                    cursor: pointer;\n                    fill: ").concat(_Env.default.DEFAULT_LABEL_BACKGROUND_COLOR, ";\n                    rx: ").concat(_Env.default.DEFAULT_LABEL_BORDER_RADIUS_X, ";\n                    ry: ").concat(_Env.default.DEFAULT_LABEL_BORDER_RADIUS_Y, ";\n                    stroke: ").concat(_Env.default.DEFAULT_LABEL_BORDER_COLOR, " !important;\n                    stroke-width: ").concat(_Env.default.DEFAULT_LABEL_BORDER_WIDTH, " !important; \n                }\n                .label-rect-default:hover{\n                    fill: ").concat(_Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, ";\n                    cursor: pointer;\n                }\n                .label g .label-rect-default.focused {\n                    stroke-width: ").concat(_Env.default.DEFAULT_NODE_FOCUSED_BORDER_WIDTH, " !important;\n                    stroke: ").concat(_Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                }\n\n                .label-text-default{\n                    fill: ").concat(_Env.default.DEFAULT_LABEL_TEXT_COLOR, ";\n                    dominant-baseline: central;\n                    pointer-events: none;\n                    font-family: ").concat(_Env.default.DEFAULT_FONT_FAMILY, ";\n                    font-size: ").concat(_Env.default.DEFAULT_FONT_SIZE, ";\n                }\n                .to:hover .label-text-default,\n                .from:hover .label-text-default{\n                    fill: ").concat(_Env.default.DEFAULT_LABEL_TEXT_HOVER_COLOR, "\n                }\n                \n                .marker-default path{\n                    fill: ").concat(_Env.default.DEFAULT_EDGE_COLOR, ";\n                }\n                .marker-default path.hovered{\n                    stroke: ").concat(_Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, " !important;\n                    fill: ").concat(_Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, " !important;\n                    cursor: pointer;\n                }\n                .marker-default path.focused{\n                    fill: ").concat(_Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                    stroke: ").concat(_Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                }\n\n                /* Default node values */\n                .node-default {\n                    cursor: pointer;\n                    stroke-width: ").concat(_Env.default.DEFAULT_STROKE_WIDTH, ";\n                    stroke: ").concat(_Env.default.DEFAULT_NODE_STROKE_COLOR, ";\n                    fill: ").concat(_Env.default.DEFAULT_NODE_COLOR, ";\n                    stroke-dasharray: 0;\n                    rx: ").concat(_Env.default.DEFAULT_NODE_BORDER_RADIUS_X, ";\n                    ry: ").concat(_Env.default.DEFAULT_NODE_BORDER_RADIUS_Y, ";\n                }\n                .node-default:hover {\n                    fill: ").concat(_Env.default.DEFAULT_NODE_HOVER_COLOR, ";\n                }\n                .node-text-default {\n                    dominant-baseline: central;\n                    pointer-events: none;\n                    font-family: ").concat(_Env.default.DEFAULT_FONT_FAMILY, ";\n                    font-size: ").concat(_Env.default.DEFAULT_FONT_SIZE, ";\n                    fill: ").concat(_Env.default.DEFAULT_NODE_TEXT_COLOR, ";\n                }\n                .node:hover .node-text-default {\n                    fill: ").concat(_Env.default.DEFAULT_NODE_TEXT_HOVER_COLOR, ";\n                }\n                .virrvarr .node-default.focused {\n                    stroke: ").concat(_Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                    stroke-width: ").concat(_Env.default.DEFAULT_NODE_FOCUSED_BORDER_WIDTH, " !important;\n                }\n                ");

  if (style && style.nodes) {
    style.nodes.forEach(function (nodeType) {
      cssString = "\n                ".concat(cssString, "\n                .node-").concat(nodeType.id, " {\n                    cursor: pointer;\n                    stroke-width: ").concat(_Env.default.DEFAULT_STROKE_WIDTH, ";\n                    stroke: ").concat(nodeType.borderColor ? nodeType.borderColor : _Env.default.DEFAULT_NODE_STROKE_COLOR, ";\n                    fill: ").concat(nodeType.backgroundColor ? nodeType.backgroundColor : _Env.default.DEFAULT_NODE_COLOR, ";\n                    stroke-dasharray: ").concat(nodeType.dotted ? _Env.default.DEFAULT_NODE_DOTTED_DASHARRAY : 0, ";\n                    rx: ").concat(nodeType.borderRadiusX ? nodeType.borderRadiusX : _Env.default.DEFAULT_NODE_BORDER_RADIUS_X, ";\n                    ry: ").concat(nodeType.borderRadiusY ? nodeType.borderRadiusY : _Env.default.DEFAULT_NODE_BORDER_RADIUS_Y, ";\n                    filter: ").concat(nodeType.shadow ? "drop-shadow(".concat(nodeType.shadow, ")") : _Env.default.DEFAULT_NODE_SHADOW ? "drop-shadow(".concat(_Env.default.DEFAULT_NODE_SHADOW, ")") : "none", ";\n                }\n                .node-").concat(nodeType.id, ":hover {\n                    fill: ").concat(nodeType.hoverColor ? nodeType.hoverColor : _Env.default.DEFAULT_NODE_HOVER_COLOR, ";\n                }\n                .node-text-").concat(nodeType.id, " {\n                    font-family: ").concat(_Env.default.DEFAULT_FONT_FAMILY, ";\n                    font-size: ").concat(_Env.default.DEFAULT_FONT_SIZE, ";\n                    dominant-baseline: central;\n                    pointer-events: none;\n                    fill: ").concat(nodeType.textColor ? nodeType.textColor : _Env.default.DEFAULT_NODE_TEXT_COLOR, ";\n                }\n                .node:hover .node-text-").concat(nodeType.id, " {\n                    fill: ").concat(nodeType.textHoverColor ? nodeType.textHoverColor : _Env.default.DEFAULT_NODE_TEXT_HOVER_COLOR, ";\n                }\n                .virrvarr .node-").concat(nodeType.id, ".focused {\n                    stroke: ").concat(nodeType.focusedColor ? nodeType.focusedColor : _Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                    stroke-width: ").concat(nodeType.focusedBorderWidth ? nodeType.focusedBorderWidth : _Env.default.DEFAULT_NODE_FOCUSED_BORDER_WIDTH, " !important;\n                }\n                ");
    });
  }

  if (style && style.edges) {
    style.edges.forEach(function (edgeType) {
      cssString = "\n                ".concat(cssString, "\n                .edge-path-").concat(edgeType.id, "{\n                    fill: none !important;\n                    stroke-width: ").concat(_Env.default.DEFAULT_STROKE_WIDTH, " !important;\n                    stroke-dasharray: ").concat(edgeType.dotted ? _Env.default.DEFAULT_EDGE_DOTTED_DASHARRAY : _Env.default.DEFAULT_EDGE_DASHARRAY, " !important;\n                    stroke: ").concat(edgeType.color ? edgeType.color : _Env.default.DEFAULT_EDGE_COLOR, " !important;\n                }\n                .edge-path-").concat(edgeType.id, ".hovered{\n                    stroke: ").concat(edgeType.hoverColor ? edgeType.hoverColor : _Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, " !important;\n                }\n                .edge-path-").concat(edgeType.id, ".focused{\n                    stroke: ").concat(edgeType.focusedColor ? edgeType.focusedColor : _Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                } \n                .label-rect-").concat(edgeType.id, "{\n                    cursor: pointer;\n                    fill: ").concat(edgeType.labelBackgroundColor ? edgeType.labelBackgroundColor : _Env.default.DEFAULT_LABEL_BACKGROUND_COLOR, ";\n                    rx: ").concat(edgeType.borderRadiusX ? edgeType.borderRadiusX : _Env.default.DEFAULT_LABEL_BORDER_RADIUS_X, ";\n                    ry: ").concat(edgeType.borderRadiusY ? edgeType.borderRadiusY : _Env.default.DEFAULT_LABEL_BORDER_RADIUS_Y, ";\n                    stroke: ").concat(edgeType.labelBorderColor ? edgeType.labelBorderColor : _Env.default.DEFAULT_LABEL_BORDER_COLOR, " !important;\n                    stroke-width: ").concat(edgeType.labelBorderWidth ? edgeType.labelBorderWidth : _Env.default.DEFAULT_LABEL_BORDER_WIDTH, " !important; \n                }\n                .label-rect-").concat(edgeType.id, ":hover{\n                    fill: ").concat(edgeType.hoverColor ? edgeType.hoverColor : _Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, ";\n                    cursor: pointer;\n                }\n                .label g .label-rect-").concat(edgeType.id, ".focused {\n                    stroke-width: ").concat(_Env.default.DEFAULT_NODE_FOCUSED_BORDER_WIDTH, " !important;\n                    stroke: ").concat(edgeType.focusedColor ? edgeType.focusedColor : _Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                }\n                .label-text-").concat(edgeType.id, "{\n                    fill: ").concat(edgeType.labelTextColor ? edgeType.labelTextColor : _Env.default.DEFAULT_LABEL_TEXT_COLOR, ";\n                    dominant-baseline: central;\n                    pointer-events: none;\n                    font-family: ").concat(_Env.default.DEFAULT_FONT_FAMILY, ";\n                    font-size: ").concat(_Env.default.DEFAULT_FONT_SIZE, ";\n                }\n                .to:hover .label-text-").concat(edgeType.id, ",\n                .from:hover .label-text-").concat(edgeType.id, "{\n                    fill: ").concat(edgeType.labelTextHoverColor ? edgeType.labelTextHoverColor : _Env.default.DEFAULT_LABEL_TEXT_HOVER_COLOR, "\n                }\n                .marker-").concat(edgeType.id, " path.hovered{\n                    stroke: ").concat(edgeType.hoverColor ? edgeType.hoverColor : _Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, " !important;\n                    fill: ").concat(edgeType.hoverColor ? edgeType.hoverColor : _Env.default.DEFAULT_LABEL_HOVER_BACKGROUND_COLOR, " !important;\n                    cursor: pointer;\n                }\n                .marker-").concat(edgeType.id, " path{\n                    fill: ").concat(edgeType.arrowColor ? edgeType.arrowColor : _Env.default.DEFAULT_ARROW_COLOR, ";\n                }\n                .marker-").concat(edgeType.id, " path.focused{\n                    fill: ").concat(edgeType.focusedColor ? edgeType.focusedColor : _Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                    stroke: ").concat(edgeType.focusedColor ? edgeType.focusedColor : _Env.default.DEFAULT_FOCUS_COLOR, " !important;\n                }\n                ");
    });
  }

  var css = document.createElement('style');
  css.type = 'text/css';
  css.id = id;
  css.appendChild(document.createTextNode(cssString));
  document.getElementsByTagName("head")[0].appendChild(css);
};

var _default = {
  initializeGraphStyles: initializeGraphStyles
};
exports.default = _default;